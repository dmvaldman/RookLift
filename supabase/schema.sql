-- =================================================================
--  RookLift - Single Source of Truth Schema
-- =================================================================
--  This file declares the desired state of the database.
--  All future schema changes should be made by editing this file
--  and then generating a new migration with `supabase db diff`.
-- =================================================================

-- -----------------------------------------------------
--  Table: lichess
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.lichess (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date DATE NOT NULL UNIQUE,
    rating_morning INTEGER,
    rating_evening INTEGER
);
COMMENT ON TABLE public.lichess IS 'Stores daily chess rating data from Lichess.';
CREATE INDEX IF NOT EXISTS idx_lichess_date ON public.lichess(date);
ALTER TABLE public.lichess ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow all operations for authenticated users" ON public.lichess FOR ALL TO authenticated USING (true) WITH CHECK (true);

-- -----------------------------------------------------
--  Table: garmin_stress
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.garmin_stress (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date DATE NOT NULL UNIQUE,
    stress_avg INTEGER
);
COMMENT ON TABLE public.garmin_stress IS 'Stores daily average stress level from Garmin.';

-- -----------------------------------------------------
--  Table: garmin_body_battery
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.garmin_body_battery (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date DATE NOT NULL UNIQUE,
    battery_max INTEGER
);
COMMENT ON TABLE public.garmin_body_battery IS 'Stores the maximum daily body battery value from Garmin.';

-- -----------------------------------------------------
--  Table: garmin_body_battery_sleep
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.garmin_body_battery_sleep (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date DATE NOT NULL UNIQUE,
    body_battery INTEGER
);
COMMENT ON TABLE public.garmin_body_battery_sleep IS 'Stores the body battery change during sleep from Garmin.';

-- -----------------------------------------------------
--  Table: garmin_sleep
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.garmin_sleep (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date DATE NOT NULL UNIQUE,
    sleep_stress REAL,
    light_duration INTEGER,
    rem_duration INTEGER,
    deep_duration INTEGER,
    sleep_duration INTEGER,
    sleep_score INTEGER,
    awake_duration INTEGER
);
COMMENT ON TABLE public.garmin_sleep IS 'Stores detailed sleep metrics for each night from Garmin.';

-- -----------------------------------------------------
--  Table: garmin_activities
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.garmin_activities (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date DATE NOT NULL UNIQUE,
    activity_calories INTEGER
);
COMMENT ON TABLE public.garmin_activities IS 'Stores total calories burned during logged activities from Garmin.';

-- -----------------------------------------------------
--  Table: garmin_summary
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.garmin_summary (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date DATE NOT NULL UNIQUE,
    steps INTEGER,
    sedentary_duration INTEGER,
    stress_duration INTEGER,
    low_stress_duration INTEGER,
    active_calories INTEGER
);
COMMENT ON TABLE public.garmin_summary IS 'Stores a summary of daily metrics from Garmin.';

-- =================================================================
--  Database Function: get_daily_signals
-- =================================================================
--  This function joins all data tables to create a unified dataset for analysis.
-- =================================================================
CREATE OR REPLACE FUNCTION get_daily_signals(
    end_date DATE,
    start_date DATE
)
RETURNS TABLE (
    -- lichess
    "date" DATE,
    "rating_morning" INTEGER,
    "rating_evening" INTEGER,
    -- garmin_stress
    "stress_avg" INTEGER,
    -- garmin_body_battery
    "battery_max" INTEGER,
    -- garmin_body_battery_sleep
    "body_battery" INTEGER,
    -- garmin_sleep
    "sleep_stress" REAL,
    "light_duration" INTEGER,
    "rem_duration" INTEGER,
    "deep_duration" INTEGER,
    "sleep_duration" INTEGER,
    "sleep_score" INTEGER,
    "awake_duration" INTEGER,
    -- garmin_activities
    "activity_calories" INTEGER,
    -- garmin_summary
    "steps" INTEGER,
    "sedentary_duration" INTEGER,
    "stress_duration" INTEGER,
    "low_stress_duration" INTEGER,
    "active_calories" INTEGER
)
AS $$
BEGIN
    RETURN QUERY
    SELECT
        -- lichess
        l.date,
        l.rating_morning,
        l.rating_evening,
        -- garmin_stress
        gs.stress_avg,
        -- garmin_body_battery
        gbb.battery_max,
        -- garmin_body_battery_sleep
        gbbs.body_battery,
        -- garmin_sleep
        gsl.sleep_stress,
        gsl.light_duration,
        gsl.rem_duration,
        gsl.deep_duration,
        gsl.sleep_duration,
        gsl.sleep_score,
        gsl.awake_duration,
        -- garmin_activities
        ga.activity_calories,
        -- garmin_summary
        gsm.steps,
        gsm.sedentary_duration,
        gsm.stress_duration,
        gsm.low_stress_duration,
        gsm.active_calories
    FROM
        public.lichess l
    LEFT JOIN public.garmin_stress gs ON l.date = gs.date
    LEFT JOIN public.garmin_body_battery gbb ON l.date = gbb.date
    LEFT JOIN public.garmin_body_battery_sleep gbbs ON l.date = gbbs.date
    LEFT JOIN public.garmin_sleep gsl ON l.date = gsl.date
    LEFT JOIN public.garmin_activities ga ON l.date = ga.date
    LEFT JOIN public.garmin_summary gsm ON l.date = gsm.date
    WHERE
        l.date >= start_date AND l.date <= end_date
        -- Rule: Lichess data must exist and have at least one rating.
        AND (l.rating_morning IS NOT NULL OR l.rating_evening IS NOT NULL);
END;
$$ LANGUAGE plpgsql;